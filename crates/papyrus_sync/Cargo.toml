[package]
name = "papyrus_sync"
version.workspace = true
edition.workspace = true
repository.workspace = true
license-file.workspace = true

[dependencies]
async-stream.workspace = true
async-trait.workspace = true
cairo-lang-starknet-classes.workspace = true
chrono.workspace = true
futures-channel.workspace = true
futures-util.workspace = true
futures.workspace = true
hex.workspace = true
indexmap = { workspace = true, features = ["serde"] }
itertools.workspace = true
libmdbx = { workspace = true, features = ["lifetimed-bytes"] }
lru.workspace = true
metrics.workspace = true
papyrus_storage = { path = "../papyrus_storage", version = "0.3.0" }
papyrus_base_layer = { path = "../papyrus_base_layer", version = "0.3.0" }
papyrus_common = { path = "../papyrus_common", version = "0.3.0" }
papyrus_config = { path = "../papyrus_config", version = "0.3.0" }
papyrus_proc_macros = { path = "../papyrus_proc_macros", version = "0.3.0" }
reqwest = { workspace = true, features = ["json", "blocking"] }
serde = { workspace = true, features = ["derive"] }
starknet_api.workspace = true
starknet_client = { path = "../starknet_client" }
thiserror.workspace = true
tokio = { workspace = true, features = ["full", "sync"] }
tracing.workspace = true
url.workspace = true

[dev-dependencies]
simple_logger.workspace = true
assert_matches.workspace = true
mockall.workspace = true
papyrus_storage = { path = "../papyrus_storage", features = ["testing"] }
pretty_assertions.workspace = true
starknet_client = { path = "../starknet_client", features = ["testing"] }
starknet_api = { workspace = true, features = ["testing"] }
test_utils = { path = "../test_utils" }
tokio-stream.workspace = true
