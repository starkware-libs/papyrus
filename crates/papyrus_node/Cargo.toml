[package]
name = "papyrus_node"
version.workspace = true
edition.workspace = true
repository.workspace = true
license-file.workspace = true

[package.metadata.cargo-udeps.ignore]
normal = ["papyrus_base_layer"]

[features]
default = ["rpc"]
rpc = ["papyrus_rpc"]

[dependencies]
anyhow.workspace = true
async-stream.workspace = true
clap = { workspace = true }
const_format.workspace = true
futures-util.workspace = true
itertools.workspace = true
jsonrpsee = { workspace = true, features = ["full"] }
libmdbx = { workspace = true, features = ["lifetimed-bytes"] }
lazy_static.workspace = true
papyrus_base_layer = { path = "../papyrus_base_layer" }
papyrus_config = { path = "../papyrus_config", version = "0.3.0-dev.1" }
papyrus_common = { path = "../papyrus_common", version = "0.3.0-dev.1" }
papyrus_monitoring_gateway = { path = "../papyrus_monitoring_gateway" }
papyrus_rpc = { path = "../papyrus_rpc", optional = true }
papyrus_storage = { path = "../papyrus_storage", version = "0.3.0-dev.1" }
papyrus_sync = { path = "../papyrus_sync" }
reqwest = { workspace = true, features = ["json", "blocking"] }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, features = ["arbitrary_precision"] }
starknet_api.workspace = true
starknet_client = { path = "../starknet_client" }
thiserror.workspace = true
tokio = { workspace = true, features = ["full", "sync"] }
tokio-stream.workspace = true
tracing-subscriber = { workspace = true, features = ["env-filter"] }
tracing.workspace = true
url.workspace = true
validator = { workspace = true, features = ["derive"] }

[target.'cfg(not(feature = "rpc"))'.dependencies]
futures.workspace = true

[dev-dependencies]
metrics-exporter-prometheus.workspace = true
pretty_assertions.workspace = true
insta = { workspace = true, features = ["json"] }
tempfile.workspace = true
test_utils = { path = "../test_utils" }
