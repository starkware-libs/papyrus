---
source: crates/papyrus_node/src/config/config_test.rs
expression: dumped_default_config
---
{
  "base_layer.node_url": {
    "description": "A required param! Ethereum node URL. A schema to match to Infura node: https://mainnet.infura.io/v3/<your_api_key>, but any other node can be used.",
    "param_type": "String",
    "privacy": "Private"
  },
  "base_layer.starknet_contract_address": {
    "description": "Starknet contract address in ethereum.",
    "value": "0xc662c410C0ECf747543f5bA90660f6ABeBD9C8c4",
    "privacy": "Public"
  },
  "central.class_cache_size": {
    "description": "Size of class cache, must be a positive integer.",
    "value": {
      "$serde_json::private::Number": "100"
    },
    "privacy": "Public"
  },
  "central.concurrent_requests": {
    "description": "Maximum number of concurrent requests to Starknet feeder-gateway for getting a type of data (for example, blocks).",
    "value": {
      "$serde_json::private::Number": "10"
    },
    "privacy": "Public"
  },
  "central.http_headers": {
    "description": "'k1:v1 k2:v2 ...' headers for SN-client.",
    "value": "",
    "privacy": "Private"
  },
  "central.max_classes_to_download": {
    "description": "Maximum number of classes to download at a given time.",
    "value": {
      "$serde_json::private::Number": "20"
    },
    "privacy": "Public"
  },
  "central.max_state_updates_to_download": {
    "description": "Maximum number of state updates to download at a given time.",
    "value": {
      "$serde_json::private::Number": "20"
    },
    "privacy": "Public"
  },
  "central.max_state_updates_to_store_in_memory": {
    "description": "Maximum number of state updates to store in memory at a given time.",
    "value": {
      "$serde_json::private::Number": "20"
    },
    "privacy": "Public"
  },
  "central.retry_config.max_retries": {
    "description": "Maximum number of retries before the node stops retrying.",
    "value": {
      "$serde_json::private::Number": "10"
    },
    "privacy": "Public"
  },
  "central.retry_config.retry_base_millis": {
    "description": "Base waiting time after a failed request. After that, the time increases exponentially.",
    "value": {
      "$serde_json::private::Number": "30"
    },
    "privacy": "Public"
  },
  "central.retry_config.retry_max_delay_millis": {
    "description": "Max waiting time after a failed request.",
    "value": {
      "$serde_json::private::Number": "30000"
    },
    "privacy": "Public"
  },
  "central.url": {
    "description": "Starknet feeder-gateway URL. It should match chain_id.",
    "value": "https://alpha-mainnet.starknet.io/",
    "privacy": "Public"
  },
  "monitoring_gateway.collect_metrics": {
    "description": "If true, collect and return metrics in the monitoring gateway.",
    "value": false,
    "privacy": "Public"
  },
  "monitoring_gateway.metric_labels": {
    "description": "'label1:value1 label2:value2 ...' additional labels for metrics.",
    "value": "",
    "privacy": "Public"
  },
  "monitoring_gateway.present_full_config_secret": {
    "description": "A secret for presenting the full general config. If no value is provided, the system will generate one.",
    "param_type": "String",
    "privacy": "Private"
  },
  "monitoring_gateway.server_address": {
    "description": "node's monitoring server.",
    "value": "0.0.0.0:8081",
    "privacy": "Public"
  },
  "monitoring_gateway.starknet_url": {
    "description": "The URL of a centralized Starknet gateway.",
    "value": "https://alpha-mainnet.starknet.io/",
    "privacy": "Public"
  },
  "network.#is_none": {
    "description": "Flag for an optional field",
    "value": true,
    "privacy": "TemporaryValue"
  },
  "network.header_buffer_size": {
    "description": "Size of the buffer for headers read from the storage.",
    "value": {
      "$serde_json::private::Number": "100000"
    },
    "privacy": "Public"
  },
  "network.idle_connection_timeout": {
    "description": "Amount of time in seconds that a connection with no active sessions will stay alive.",
    "value": {
      "$serde_json::private::Number": "10"
    },
    "privacy": "Public"
  },
  "network.peer.#is_none": {
    "description": "Flag for an optional field",
    "value": true,
    "privacy": "TemporaryValue"
  },
  "network.peer.ip": {
    "description": "The ipv4 address of another peer that the node will dial to.",
    "value": "127.0.0.1",
    "privacy": "Public"
  },
  "network.peer.peer_id": {
    "description": "Peer ID to send requests to. If not set, the node will not send requests. for info: https://docs.libp2p.io/concepts/fundamentals/peers/",
    "value": "QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N",
    "privacy": "Public"
  },
  "network.peer.tcp_port": {
    "description": "The port on the other peer that the node will dial to to use for TCP transport.",
    "value": {
      "$serde_json::private::Number": "10002"
    },
    "privacy": "Public"
  },
  "network.quic_port": {
    "description": "The port that the node listens on for incoming quic connections.",
    "value": {
      "$serde_json::private::Number": "10001"
    },
    "privacy": "Public"
  },
  "network.session_timeout": {
    "description": "Maximal time in seconds that each session can take before failing on timeout.",
    "value": {
      "$serde_json::private::Number": "10"
    },
    "privacy": "Public"
  },
  "network.tcp_port": {
    "description": "The port that the node listens on for incoming tcp connections.",
    "value": {
      "$serde_json::private::Number": "10000"
    },
    "privacy": "Public"
  },
  "p2p_sync.#is_none": {
    "description": "Flag for an optional field",
    "value": true,
    "privacy": "TemporaryValue"
  },
  "p2p_sync.num_headers_per_query": {
    "description": "The maximum amount of headers to ask from peers in each iteration.",
    "value": {
      "$serde_json::private::Number": "10000"
    },
    "privacy": "Public"
  },
  "p2p_sync.query_timeout": {
    "description": "Time in seconds to wait for query responses until we mark it as failed",
    "value": {
      "$serde_json::private::Number": "5"
    },
    "privacy": "Public"
  },
  "rpc.chain_id": {
    "description": "The chain to follow. For more details see https://docs.starknet.io/documentation/architecture_and_concepts/Blocks/transactions/#chain-id.",
    "value": "SN_MAIN",
    "privacy": "Public"
  },
  "rpc.collect_metrics": {
    "description": "If true, collect metrics for the rpc.",
    "value": false,
    "privacy": "Public"
  },
  "rpc.execution_config": {
    "description": "Path to the execution configuration file.",
    "value": "config/execution/mainnet.json",
    "privacy": "Public"
  },
  "rpc.max_events_chunk_size": {
    "description": "Maximum chunk size supported by the node in get_events requests.",
    "value": {
      "$serde_json::private::Number": "1000"
    },
    "privacy": "Public"
  },
  "rpc.max_events_keys": {
    "description": "Maximum number of keys supported by the node in get_events requests.",
    "value": {
      "$serde_json::private::Number": "100"
    },
    "privacy": "Public"
  },
  "rpc.server_address": {
    "description": "IP:PORT of the node`s JSON-RPC server.",
    "value": "0.0.0.0:8080",
    "privacy": "Public"
  },
  "rpc.starknet_gateway_retry_config.max_retries": {
    "description": "For communicating with Starknet gateway, maximum number of retries before the node stops retrying.",
    "value": {
      "$serde_json::private::Number": "5"
    },
    "privacy": "Public"
  },
  "rpc.starknet_gateway_retry_config.retry_base_millis": {
    "description": "For communicating with Starknet gateway, base waiting time after a failed request. After that, the time increases exponentially.",
    "value": {
      "$serde_json::private::Number": "50"
    },
    "privacy": "Public"
  },
  "rpc.starknet_gateway_retry_config.retry_max_delay_millis": {
    "description": "For communicating with Starknet gateway, max waiting time after a failed request.",
    "value": {
      "$serde_json::private::Number": "1000"
    },
    "privacy": "Public"
  },
  "rpc.starknet_url": {
    "description": "URL for communicating with Starknet in write_api methods.",
    "value": "https://alpha-mainnet.starknet.io/",
    "privacy": "Public"
  },
  "storage.db_config.chain_id": {
    "description": "The chain to follow. For more details see https://docs.starknet.io/documentation/architecture_and_concepts/Blocks/transactions/#chain-id.",
    "value": "SN_MAIN",
    "privacy": "Public"
  },
  "storage.db_config.enforce_file_exists": {
    "description": "Whether to enforce that the path exists. If true, `open_env` fails when the mdbx.dat file does not exist.",
    "value": false,
    "privacy": "Public"
  },
  "storage.db_config.growth_step": {
    "description": "The growth step in bytes, must be greater than zero to allow the database to grow.",
    "value": {
      "$serde_json::private::Number": "4294967296"
    },
    "privacy": "Public"
  },
  "storage.db_config.max_size": {
    "description": "The maximum size of the node's storage in bytes.",
    "value": {
      "$serde_json::private::Number": "1099511627776"
    },
    "privacy": "Public"
  },
  "storage.db_config.min_size": {
    "description": "The minimum size of the node's storage in bytes.",
    "value": {
      "$serde_json::private::Number": "1048576"
    },
    "privacy": "Public"
  },
  "storage.db_config.path_prefix": {
    "description": "Prefix of the path of the node's storage directory, the storage file path will be <path_prefix>/<chain_id>. The path is not created automatically.",
    "value": "./data",
    "privacy": "Public"
  },
  "storage.mmap_file_config.growth_step": {
    "description": "The growth step in bytes, must be greater than max_object_size.",
    "value": {
      "$serde_json::private::Number": "1073741824"
    },
    "privacy": "Public"
  },
  "storage.mmap_file_config.max_object_size": {
    "description": "The maximum size of a single object in the file in bytes",
    "value": {
      "$serde_json::private::Number": "1048576"
    },
    "privacy": "Public"
  },
  "storage.mmap_file_config.max_size": {
    "description": "The maximum size of a memory mapped file in bytes. Must be greater than growth_step.",
    "value": {
      "$serde_json::private::Number": "1099511627776"
    },
    "privacy": "Public"
  },
  "storage.scope": {
    "description": "The categories of data saved in storage.",
    "value": "FullArchive",
    "privacy": "Public"
  },
  "sync.#is_none": {
    "description": "Flag for an optional field",
    "value": false,
    "privacy": "TemporaryValue"
  },
  "sync.base_layer_propagation_sleep_duration": {
    "description": "Time in seconds to poll the base layer to get the latest proved block.",
    "value": {
      "$serde_json::private::Number": "10"
    },
    "privacy": "Public"
  },
  "sync.block_propagation_sleep_duration": {
    "description": "Time in seconds before checking for a new block after the node is synchronized.",
    "value": {
      "$serde_json::private::Number": "2"
    },
    "privacy": "Public"
  },
  "sync.blocks_max_stream_size": {
    "description": "Max amount of blocks to download in a stream.",
    "value": {
      "$serde_json::private::Number": "1000"
    },
    "privacy": "Public"
  },
  "sync.recoverable_error_sleep_duration": {
    "description": "Waiting time in seconds before restarting synchronization after a recoverable error.",
    "value": {
      "$serde_json::private::Number": "3"
    },
    "privacy": "Public"
  },
  "sync.state_updates_max_stream_size": {
    "description": "Max amount of state updates to download in a stream.",
    "value": {
      "$serde_json::private::Number": "1000"
    },
    "privacy": "Public"
  },
  "sync.verify_blocks": {
    "description": "Whether to verify incoming blocks.",
    "value": true,
    "privacy": "Public"
  }
}
