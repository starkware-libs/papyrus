[package]
name = "papyrus_storage"
version.workspace = true
edition.workspace = true
repository.workspace = true
license-file.workspace = true
description = "A storage implementation for a Starknet node."

[features]
testing = ["tempfile"]

[dependencies]
byteorder.workspace = true
cairo-lang-starknet-classes.workspace = true
cairo-lang-casm = { workspace = true, features = ["parity-scale-codec"] }
cairo-lang-utils.workspace = true
clap.workspace = true
flate2.workspace = true
human_bytes.workspace = true
indexmap = { workspace = true, features = ["serde"] }
integer-encoding.workspace = true
libmdbx = { workspace = true, features = ["lifetimed-bytes"] }
memmap2.workspace = true
metrics.workspace = true
num-bigint.workspace = true
page_size.workspace = true
papyrus_config = { path = "../papyrus_config", version = "0.3.0" }
papyrus_proc_macros = { path = "../papyrus_proc_macros", version = "0.3.0" }
parity-scale-codec.workspace = true
primitive-types.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, features = ["arbitrary_precision"] }
starknet_api.workspace = true
tempfile = { workspace = true, optional = true }
thiserror.workspace = true
tracing = { workspace = true, features = ["log"] }
validator = { workspace = true, features = ["derive"] }

[dev-dependencies]
assert_matches.workspace = true
cairo-lang-casm = { workspace = true, features = [
    "parity-scale-codec",
    "schemars",
] }
camelpaste.workspace = true
insta = { workspace = true, features = ["yaml"] }
metrics-exporter-prometheus.workspace = true
num-traits.workspace = true
paste.workspace = true
pretty_assertions.workspace = true
prometheus-parse.workspace = true
rand.workspace = true
rand_chacha.workspace = true
schemars = { workspace = true, features = ["preserve_order"] }
tempfile = { workspace = true }
test-case.workspace = true
test-log.workspace = true
test_utils = { path = "../test_utils" }
tokio = { workspace = true, features = ["full", "sync"] }
